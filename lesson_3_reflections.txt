When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository would be great when I want to work with other people
on the same project or I want to take part in an ongoing project. Using a
remote repository, allows many users to contribute to a project without needing
to all be using the same computer.




Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

You want to make sure that the changes that are being pulled are changes that
you want to have on your local repository. This allows a user to avoid getting
unwanted commits and changes. Just like push, you want to have control over
what new data you allow into your repository.




Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Forks are a type of cloning that is done in GitHub. A clone is made of a
repository in GitHub and copied to GitHub. A clones are copies that can be made
locally, and from GitHub to your local computer. Clones are different than
copies because you can have metadate saved that stores the commits made. A
branch on the other hand is when you make two commit path from a single
parent commit. This is useful when you want to experiment with your code without
breaking any of the working files.




What is the benefit of having a copy of the last known state of the remote
stored locally?

This allows Git to know if a Fast-Foward merge would be available to be made
or if there would need to be a regular merge with posible conflicts. These are
different in their time consumption. One is quick and the other is not.




How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Instead of using Git I would be using just file sharing through emails. I think
that this would be harder and not easier. I cannot think of anything that would
be easier than using Git to collaborate. 




When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

You want to work on a different branch when you want to try and experiment on
new things without messing up the master and it's working files. This also would
allow you to make changes to the main code without the owners permission and
then using a pull request to try and get your changes into the master version.
The downside of using a different branch is the complexity that it takes to make
changes, put them on your local computer, make changes and then push the branch
and merge the branch with the origin/master. (commited wrong number)







